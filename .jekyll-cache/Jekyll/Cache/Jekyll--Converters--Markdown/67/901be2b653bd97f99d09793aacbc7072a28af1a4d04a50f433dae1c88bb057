I"xù<h2 id="introduction">Introduction</h2>

<p>In a <a href="https://atom-morgan.github.io/template-driven-forms-in-angular/" target="_blank">previous tutorial</a> we took a closer look at template-driven forms. This is one of two approaches available to us as developers to create forms in Angular.</p>

<p>In this tutorial we‚Äôll learn the basics of Angular‚Äôs other approach to forms, reactive forms. Similar to the previous tutorial, we‚Äôll do this by creating a user signup page with the same three fields: name, email, and password.</p>

<h2 id="setup">Setup</h2>

<p>If you haven‚Äôt already, you‚Äôll first need to install the <a href="https://cli.angular.io/" target="_blank">Angular CLI</a>.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">npm install -g @angular/cli
</span></code></pre></div></div>

<p>Once the CLI is installed, you can then create a new application.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">ng new reactive-forms
cd reactive-forms
</span></code></pre></div></div>

<p>Once your application has been created, you can run the application.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">ng serve
</span></code></pre></div></div>

<p>Open a browser to <code class="language-plaintext highlighter-rouge">http://localhost:4200</code> and you should see the default Angular application as shown below.</p>

<p><img src="/images/reactive-forms/ng-new.png" alt="Default Angular application" /></p>

<h2 id="formsmodule">FormsModule</h2>

<p>Now that our application is created and ready, we can start working towards creating a reactive form. Similar to template-driven forms, reactive forms are also in their own module so we‚Äôll need to import it.</p>

<p>First, import <code class="language-plaintext highlighter-rouge">ReactiveFormsModule</code> in <code class="language-plaintext highlighter-rouge">app.module.ts</code> and then add it to <code class="language-plaintext highlighter-rouge">imports</code>.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">ReactiveFormsModule</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/forms</span><span class="dl">'</span><span class="p">;</span>

<span class="p">@</span><span class="nd">NgModule</span><span class="p">({</span>
  <span class="na">declarations</span><span class="p">:</span> <span class="p">[</span>
    <span class="nx">AppComponent</span>
  <span class="p">],</span>
  <span class="na">imports</span><span class="p">:</span> <span class="p">[</span>
    <span class="nx">BrowserModule</span><span class="p">,</span>
    <span class="nx">ReactiveFormsModule</span>
  <span class="p">],</span>
  <span class="na">providers</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">bootstrap</span><span class="p">:</span> <span class="p">[</span><span class="nx">AppComponent</span><span class="p">]</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">AppModule</span> <span class="p">{</span> <span class="p">}</span>
</code></pre></div></div>

<p>With <code class="language-plaintext highlighter-rouge">ReactiveFormsModule</code> imported we‚Äôre now ready to move on to creating our form.</p>

<div class="box">
  <p>Got an idea for a tutorial? Contact me <a href="https://twitter.com/atommorgan" target="_blank">on Twitter</a> and I might publish it on this blog!</p>
</div>

<h2 id="registration-form">Registration Form</h2>

<p>Once again we‚Äôll begin by updating <code class="language-plaintext highlighter-rouge">app.component.html</code> with the most basic structure of our reactive form. From there, we‚Äôll continue to add more functionality to our form.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;form</span> <span class="na">[formGroup]=</span><span class="s">"reactiveForm"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;label</span> <span class="na">class=</span><span class="s">"label"</span><span class="nt">&gt;</span>Name<span class="nt">&lt;/label&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">"input"</span>
         <span class="na">type=</span><span class="s">"text"</span>
         <span class="na">formControlName=</span><span class="s">"name"</span><span class="nt">&gt;</span>

  <span class="nt">&lt;label</span> <span class="na">class=</span><span class="s">"label"</span><span class="nt">&gt;</span>Email<span class="nt">&lt;/label&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">"input"</span>
         <span class="na">type=</span><span class="s">"text"</span>
         <span class="na">formControlName=</span><span class="s">"email"</span><span class="nt">&gt;</span>

  <span class="nt">&lt;label</span> <span class="na">class=</span><span class="s">"label"</span><span class="nt">&gt;</span>Password<span class="nt">&lt;/label&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">"input"</span>
         <span class="na">type=</span><span class="s">"password"</span>
         <span class="na">formControlName=</span><span class="s">"password"</span><span class="nt">&gt;</span>

  <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span><span class="nt">&gt;</span>Submit<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</code></pre></div></div>

<p>Within this form we have three inputs for name, email, and password along with a submit button.</p>

<p>Let‚Äôs breakdown some of the new syntax within this form.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">formControlName="name"</code> - This is what‚Äôs known as a <code class="language-plaintext highlighter-rouge">FormControl</code> and it‚Äôs the basic building block of reactive forms. We set it equal to the name of whatever input it is that we‚Äôre creating. In this case we have three <code class="language-plaintext highlighter-rouge">FormControls</code>: <code class="language-plaintext highlighter-rouge">name</code>, <code class="language-plaintext highlighter-rouge">email</code>, and <code class="language-plaintext highlighter-rouge">password</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">[formGroup]="reactiveForm"</code> - This directive allows us to group the <code class="language-plaintext highlighter-rouge">FormControls</code> within our form. We add the <code class="language-plaintext highlighter-rouge">[formGroup]</code> directive to our <code class="language-plaintext highlighter-rouge">form</code> element and give it a name such as <code class="language-plaintext highlighter-rouge">reactiveForm</code>.</li>
</ul>

<p>At this point, our form template is setup correctly but we still have one small issue. Open the app in a browser, open the developer console, and you should see an error message such as ‚ÄúError: formGroup expects a FormGroup instance. Please pass one in.‚Äù.</p>

<p><img src="/images/reactive-forms/no-form-group.png" alt="No formgroup instance" /></p>

<p>As mentioned earlier, our form and its fields are composed of a <code class="language-plaintext highlighter-rouge">FormGroup</code> and <code class="language-plaintext highlighter-rouge">FormControls</code>. However, in order for our component and template to communicate with one another we need to setup our <code class="language-plaintext highlighter-rouge">FormGroup</code> and <code class="language-plaintext highlighter-rouge">FormControls</code> in our component.</p>

<h2 id="build-reactive-form">Build Reactive Form</h2>

<p>To fix this error, we‚Äôll first need to add imports for <code class="language-plaintext highlighter-rouge">FormBuilder</code> and <code class="language-plaintext highlighter-rouge">FormGroup</code> to our component. Since <code class="language-plaintext highlighter-rouge">FormBuilder</code> is a service we inject that into our component‚Äôs constructor as well.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">OnInit</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/core</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">FormBuilder</span><span class="p">,</span> <span class="nx">FormGroup</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/forms</span><span class="dl">'</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Component</span><span class="p">({</span>
  <span class="na">selector</span><span class="p">:</span> <span class="dl">'</span><span class="s1">app-root</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">templateUrl</span><span class="p">:</span> <span class="dl">'</span><span class="s1">./app.component.html</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">styleUrls</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">./app.component.css</span><span class="dl">'</span><span class="p">]</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">AppComponent</span> <span class="k">implements</span> <span class="nx">OnInit</span> <span class="p">{</span>
  <span class="nl">reactiveForm</span><span class="p">:</span> <span class="nx">FormGroup</span><span class="p">;</span>

  <span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="nx">fb</span><span class="p">:</span> <span class="nx">FormBuilder</span><span class="p">)</span> <span class="p">{</span>

  <span class="p">}</span>

  <span class="nx">ngOnInit</span><span class="p">()</span> <span class="p">{</span>

  <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>

<p>In addition to our imports, we also add a component property <code class="language-plaintext highlighter-rouge">reactiveForm</code> of type <code class="language-plaintext highlighter-rouge">FormGroup</code>. This property name, <code class="language-plaintext highlighter-rouge">reactiveForm</code>, must be the same name we provided in our template to the directive <code class="language-plaintext highlighter-rouge">[formGroup]</code>.</p>

<p>Now that our imports and component property is set we can create the <code class="language-plaintext highlighter-rouge">FormGroup</code> object to address our earlier error.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">ngOnInit</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">createForm</span><span class="p">();</span>
<span class="p">}</span>

<span class="nx">createForm</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">reactiveForm</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">fb</span><span class="p">.</span><span class="nx">group</span><span class="p">({</span>
    <span class="na">name</span><span class="p">:</span> <span class="p">[</span><span class="dl">''</span><span class="p">],</span>
    <span class="na">email</span><span class="p">:</span> <span class="p">[</span><span class="dl">''</span><span class="p">],</span>
    <span class="na">password</span><span class="p">:</span> <span class="p">[</span><span class="dl">''</span><span class="p">]</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Here we‚Äôve created a <code class="language-plaintext highlighter-rouge">createForm</code> function that will create the <code class="language-plaintext highlighter-rouge">FormGroup</code> object using the <code class="language-plaintext highlighter-rouge">FormBuilder</code> service. We set our <code class="language-plaintext highlighter-rouge">reactiveForm</code> property to a new <code class="language-plaintext highlighter-rouge">FormGroup</code> instance by calling <code class="language-plaintext highlighter-rouge">.group()</code>. Within this we provide an object of <code class="language-plaintext highlighter-rouge">FormControls</code>.</p>

<p>The key for each <code class="language-plaintext highlighter-rouge">FormControl</code> maps to the names we provided in our template to <code class="language-plaintext highlighter-rouge">formControlName</code>. After each key is an array with its first value, an empty string, being the initial value for the form control.</p>

<blockquote>
  <p>It‚Äôs worth noting you can import <code class="language-plaintext highlighter-rouge">FormControl</code> and create them explicitly as shown <a href="https://angular.io/api/forms/FormControl#usage-notes" target="_blank">here</a>. However, when using <code class="language-plaintext highlighter-rouge">FormBuilder</code> you can just use the object passed in to <code class="language-plaintext highlighter-rouge">.group()</code> as shorthand.</p>
</blockquote>

<p>Now when you go back to your browser you should have a form visible with no errors now that our <code class="language-plaintext highlighter-rouge">FormGroup</code> has been initialized.</p>

<p><img src="/images/reactive-forms/no-form-group-fix.png" alt="Fix for no formgroup instance" /></p>

<h2 id="submit-handler">Submit handler</h2>

<p>Now that our app is back to an error-less state, we can wire up our form‚Äôs <code class="language-plaintext highlighter-rouge">ngSubmit</code> event to a component function <code class="language-plaintext highlighter-rouge">onSubmit</code>.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;form</span> <span class="na">[formGroup]=</span><span class="s">"reactiveForm"</span> <span class="na">(ngSubmit)=</span><span class="s">"onSubmit()"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;label</span> <span class="na">class=</span><span class="s">"label"</span><span class="nt">&gt;</span>Name<span class="nt">&lt;/label&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">"input"</span>
         <span class="na">type=</span><span class="s">"text"</span>
         <span class="na">formControlName=</span><span class="s">"name"</span><span class="nt">&gt;</span>

  <span class="nt">&lt;label</span> <span class="na">class=</span><span class="s">"label"</span><span class="nt">&gt;</span>Email<span class="nt">&lt;/label&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">"input"</span>
         <span class="na">type=</span><span class="s">"text"</span>
         <span class="na">formControlName=</span><span class="s">"email"</span><span class="nt">&gt;</span>

  <span class="nt">&lt;label</span> <span class="na">class=</span><span class="s">"label"</span><span class="nt">&gt;</span>Password<span class="nt">&lt;/label&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">"input"</span>
         <span class="na">type=</span><span class="s">"password"</span>
         <span class="na">formControlName=</span><span class="s">"password"</span><span class="nt">&gt;</span>

  <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span><span class="nt">&gt;</span>Submit<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</code></pre></div></div>

<p>Then we create our <code class="language-plaintext highlighter-rouge">onSubmit</code> function in <code class="language-plaintext highlighter-rouge">AppComponent</code>.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">onSubmit</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">reactiveForm</span><span class="dl">'</span> <span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">reactiveForm</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now when you fill out the form and submit, you should see your form‚Äôs values logged to the console.</p>

<p><img src="/images/reactive-forms/form-submit.png" alt="Form submission" /></p>

<h2 id="validation">Validation</h2>

<p>We now have a reactive form that‚Äôs functional and calling a component function when submitted. To wrap up, we‚Äôll add some validation to our form to prevent the user from submitting until all fields are valid.</p>

<p>First, we‚Äôll need to import <code class="language-plaintext highlighter-rouge">Validators</code> which will allow us to set specific validation rules for <code class="language-plaintext highlighter-rouge">FormControls</code>.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">FormBuilder</span><span class="p">,</span> <span class="nx">FormGroup</span><span class="p">,</span> <span class="nx">Validators</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/forms</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div>

<p>Then, we can update the <code class="language-plaintext highlighter-rouge">FormControls</code> by adding a second value to each array with the value <code class="language-plaintext highlighter-rouge">Validators.required</code>. As you might be able to guess, this will ensure each field has a value before it‚Äôs considered ‚Äúvalid‚Äù.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">createForm</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">reactiveForm</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">fb</span><span class="p">.</span><span class="nx">group</span><span class="p">({</span>
    <span class="na">name</span><span class="p">:</span> <span class="p">[</span><span class="dl">''</span><span class="p">,</span> <span class="nx">Validators</span><span class="p">.</span><span class="nx">required</span><span class="p">],</span>
    <span class="na">email</span><span class="p">:</span> <span class="p">[</span><span class="dl">''</span><span class="p">,</span> <span class="nx">Validators</span><span class="p">.</span><span class="nx">required</span><span class="p">],</span>
    <span class="na">password</span><span class="p">:</span> <span class="p">[</span><span class="dl">''</span><span class="p">,</span> <span class="nx">Validators</span><span class="p">.</span><span class="nx">required</span><span class="p">]</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Now we can leverage these validators to disable our form‚Äôs submit button until the form is valid.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">[disabled]=</span><span class="s">"!reactiveForm.valid"</span><span class="nt">&gt;</span>Submit<span class="nt">&lt;/button&gt;</span>
</code></pre></div></div>

<p>Now when you go back to your browser, the ‚ÄúSubmit‚Äù button should be disabled until you enter a value into every required field.</p>

<h2 id="more-validation">More validation!</h2>

<p>It‚Äôs not uncommon at all for inputs within a form to have <em>multiple</em> requirements to fulfill before they can be considered valid. Thankfully, the <code class="language-plaintext highlighter-rouge">FormBuilder</code> service makes this easy for us.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">createForm</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">reactiveForm</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">fb</span><span class="p">.</span><span class="nx">group</span><span class="p">({</span>
    <span class="na">name</span><span class="p">:</span> <span class="p">[</span><span class="dl">''</span><span class="p">,</span> <span class="nx">Validators</span><span class="p">.</span><span class="nx">required</span><span class="p">],</span>
    <span class="na">email</span><span class="p">:</span> <span class="p">[</span><span class="dl">''</span><span class="p">,</span> <span class="p">[</span><span class="nx">Validators</span><span class="p">.</span><span class="nx">required</span><span class="p">,</span> <span class="nx">Validators</span><span class="p">.</span><span class="nx">email</span><span class="p">]],</span>
    <span class="na">password</span><span class="p">:</span> <span class="p">[</span><span class="dl">''</span><span class="p">,</span> <span class="p">[</span><span class="nx">Validators</span><span class="p">.</span><span class="nx">required</span><span class="p">,</span> <span class="nx">Validators</span><span class="p">.</span><span class="nx">minLength</span><span class="p">(</span><span class="mi">6</span><span class="p">)]]</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<p>To add more validators to a <code class="language-plaintext highlighter-rouge">FormControl</code> we simply add any additional validators to the desired control‚Äôs second argument. As you can see, if a <code class="language-plaintext highlighter-rouge">FormControl</code> has more than one validator we simply provide it an array of validators instead.</p>

<blockquote>
  <p>You can see a complete list of Angular‚Äôs built-in validators <a href="https://angular.io/api/forms/Validators" target="_blank">here</a>.</p>
</blockquote>

<h2 id="error-messages">Error messages</h2>

<p>Now that we have multiple validators on some of our form‚Äôs controls, it might be a good idea to provide the user some helpful error messages if their provided value isn‚Äôt valid.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;form</span> <span class="na">[formGroup]=</span><span class="s">"reactiveForm"</span> <span class="na">(ngSubmit)=</span><span class="s">"onSubmit()"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;label</span> <span class="na">class=</span><span class="s">"label"</span><span class="nt">&gt;</span>Name<span class="nt">&lt;/label&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">"input"</span>
         <span class="na">type=</span><span class="s">"text"</span>
         <span class="na">formControlName=</span><span class="s">"name"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;p</span> <span class="na">*ngIf=</span><span class="s">"name.invalid &amp;&amp; !name.pristine"</span><span class="nt">&gt;</span>Name is required.<span class="nt">&lt;/p&gt;</span>

  <span class="nt">&lt;label</span> <span class="na">class=</span><span class="s">"label"</span><span class="nt">&gt;</span>Email<span class="nt">&lt;/label&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">"input"</span>
         <span class="na">type=</span><span class="s">"text"</span>
         <span class="na">formControlName=</span><span class="s">"email"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">*ngIf=</span><span class="s">"email.invalid &amp;&amp; !email.pristine"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;p</span> <span class="na">*ngIf=</span><span class="s">"email.errors.email"</span><span class="nt">&gt;</span>Valid email is required.<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/div&gt;</span>

  <span class="nt">&lt;label</span> <span class="na">class=</span><span class="s">"label"</span><span class="nt">&gt;</span>Password<span class="nt">&lt;/label&gt;</span>
  <span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">"input"</span>
         <span class="na">type=</span><span class="s">"password"</span>
         <span class="na">formControlName=</span><span class="s">"password"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">*ngIf=</span><span class="s">"password.invalid &amp;&amp; !password.pristine"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;p</span> <span class="na">*ngIf=</span><span class="s">"password.errors.minlength"</span><span class="nt">&gt;</span>Password should be at least 6 characters.<span class="nt">&lt;/p&gt;</span>
  <span class="nt">&lt;/div&gt;</span>

  <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">[disabled]=</span><span class="s">"!reactiveForm.valid"</span><span class="nt">&gt;</span>Submit<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</code></pre></div></div>

<p>Below each input we‚Äôve added a conditional error message. For an input like name, we display the message if the value is <code class="language-plaintext highlighter-rouge">invalid</code> and its control isn‚Äôt <code class="language-plaintext highlighter-rouge">pristine</code> meaning its value has changed.</p>

<blockquote>
  <p>You can see a full list of <code class="language-plaintext highlighter-rouge">FormControl</code> properties such as <code class="language-plaintext highlighter-rouge">pristine</code> and their descriptions <a href="https://angular.io/api/forms/AbstractControl#properties" target="_blank">here</a>.</p>
</blockquote>

<p>For inputs such as email and password that have multiple validators there‚Äôs an extra step. Similar to name we only display the messages if the value is invalid and if the controls‚Äô values has changed.</p>

<p>Then we add another conditional for the specific validation error on the <code class="language-plaintext highlighter-rouge">FormControl</code>‚Äôs <code class="language-plaintext highlighter-rouge">errors</code> property. In the case of email it‚Äôs <code class="language-plaintext highlighter-rouge">*ngIf="email.errors.email"</code> and for password it‚Äôs <code class="language-plaintext highlighter-rouge">*ngIf="password.errors.minlength"</code>.</p>

<blockquote>
  <p>Yes, unfortunately the validator name is <code class="language-plaintext highlighter-rouge">minLength</code> but the property name on <code class="language-plaintext highlighter-rouge">errors</code> is <code class="language-plaintext highlighter-rouge">minlength</code>.</p>
</blockquote>

<p>At this point, open up your browser, open the developer console, and you should see an error like ‚ÄúERROR TypeError: Cannot read property ‚Äòinvalid‚Äô of undefined‚Äù.</p>

<h2 id="getters">Getters</h2>

<p>This error is due to our <code class="language-plaintext highlighter-rouge">FormControls</code> such as <code class="language-plaintext highlighter-rouge">name</code> and <code class="language-plaintext highlighter-rouge">email</code> not being accessible through our template.  To fix this, we‚Äôll create getter methods in our component to retrieve the specific controls within our form.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">onSubmit</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">reactiveForm</span><span class="dl">'</span> <span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">reactiveForm</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">get</span> <span class="nx">name</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">reactiveForm</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">);</span> <span class="p">}</span>
<span class="kd">get</span> <span class="nx">email</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">reactiveForm</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">email</span><span class="dl">'</span><span class="p">);</span> <span class="p">}</span>
<span class="kd">get</span> <span class="nx">password</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">reactiveForm</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">password</span><span class="dl">'</span><span class="p">);</span> <span class="p">}</span>
</code></pre></div></div>

<p>Now when you go back to your browser, you should see error messages displayed in real-time as you type if they fail to meet the requirements specified by the validators.</p>

<p><img src="/images/reactive-forms/error-messages.png" alt="Error messages" /></p>

<h2 id="add-css">Add CSS</h2>

<p>At this point our form is complete but it could use some visual work.</p>

<blockquote>
  <p>Since this is outside the scope of this tutorial I won‚Äôt explain everything in detail but you can read my Bulma tutorial <a href="https://atom-morgan.github.io/styling-angular-v6-apps-with-bulma/" target="_blank">here</a>.</p>
</blockquote>

<p>First, we‚Äôll update our template with some of Bulma‚Äôs classes.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">"section"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"columns is-centered"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"column is-one-third"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;form</span> <span class="na">[formGroup]=</span><span class="s">"reactiveForm"</span> <span class="na">(ngSubmit)=</span><span class="s">"onSubmit()"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"field"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;label</span> <span class="na">class=</span><span class="s">"label"</span><span class="nt">&gt;</span>Name<span class="nt">&lt;/label&gt;</span>
          <span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">"input"</span>
                  <span class="na">type=</span><span class="s">"text"</span>
                  <span class="na">formControlName=</span><span class="s">"name"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;p</span> <span class="na">*ngIf=</span><span class="s">"name.invalid &amp;&amp; !name.pristine"</span> <span class="na">class=</span><span class="s">"is-size-6 has-text-danger"</span><span class="nt">&gt;</span>Name is required.<span class="nt">&lt;/p&gt;</span>
        <span class="nt">&lt;/div&gt;</span>

        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"field"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;label</span> <span class="na">class=</span><span class="s">"label"</span><span class="nt">&gt;</span>Email<span class="nt">&lt;/label&gt;</span>
          <span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">"input"</span>
                 <span class="na">type=</span><span class="s">"text"</span>
                 <span class="na">formControlName=</span><span class="s">"email"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;div</span> <span class="na">*ngIf=</span><span class="s">"email.invalid &amp;&amp; !email.pristine"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;p</span> <span class="na">*ngIf=</span><span class="s">"email.errors.email"</span> <span class="na">class=</span><span class="s">"is-size-6 has-text-danger"</span><span class="nt">&gt;</span>Valid email is required.<span class="nt">&lt;/p&gt;</span>
          <span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;/div&gt;</span>

        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"field"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;label</span> <span class="na">class=</span><span class="s">"label"</span><span class="nt">&gt;</span>Password<span class="nt">&lt;/label&gt;</span>
          <span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">"input"</span>
                 <span class="na">type=</span><span class="s">"password"</span>
                 <span class="na">formControlName=</span><span class="s">"password"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;div</span> <span class="na">*ngIf=</span><span class="s">"password.invalid &amp;&amp; !password.pristine"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;p</span> <span class="na">*ngIf=</span><span class="s">"password.errors.minlength"</span> <span class="na">class=</span><span class="s">"is-size-6 has-text-danger"</span><span class="nt">&gt;</span>Password should be at least 6 characters.<span class="nt">&lt;/p&gt;</span>
          <span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;/div&gt;</span>

        <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">[disabled]=</span><span class="s">"!reactiveForm.valid"</span> <span class="na">class=</span><span class="s">"button is-primary"</span><span class="nt">&gt;</span>Submit<span class="nt">&lt;/button&gt;</span>
      <span class="nt">&lt;/form&gt;</span>      
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/section&gt;</span>
</code></pre></div></div>

<p>Then we‚Äôll install Bulma.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">npm install bulma --save
</span></code></pre></div></div>

<p>Once that has finished, we can add it to our project by updating the <code class="language-plaintext highlighter-rouge">styles</code> property in <code class="language-plaintext highlighter-rouge">angular.json</code>.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="err">...</span><span class="w">
  </span><span class="nl">"styles"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"node_modules/bulma/css/bulma.min.css"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"src/styles.css"</span><span class="w">
  </span><span class="p">],</span><span class="w">
  </span><span class="err">...</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Restart your app using <code class="language-plaintext highlighter-rouge">ng serve</code>, open it up in a browser, and you should see your reactive form styled with Bulma.</p>

<p><img src="/images/reactive-forms/bulma-styling.png" alt="Bulma styling" /></p>

<h2 id="conclusion">Conclusion</h2>

<p>You‚Äôve now learned the basics of reactive forms in Angular.</p>

<p>If you found this valuable and would like to see more, feel free to let me know <a href="https://twitter.com/atommorgan" target="_blank">on Twitter</a>.</p>

<!-- <hr style="border: 0; border-bottom: solid 2px; margin: 3rem 0; border-bottom-color: #212931;">

<article class="post featured featured-bottom">
  <header class="major">
    <h2 style="font-size: 3rem;">Before you go...</h2>
    <h3>Feeling stuck copying and pasting from tutorials that don't build realistic applications?</h3>
    <h4>Become an Angular developer by building a real application using open-source libraries with a real API and database.</h4>
    <div class="box">
      <p><i>"The advice and techniques in this book landed me my dream job and literally doubled my salary. Well worth the $99 bucks, so much so that I have been waiting for it to be for sale just to pay the man for the good he has done to my career." -Levi Robertson</i></p>
    </div>
  </header>

  <a href="https://landing.mailerlite.com/webforms/landing/k8s9l8" class="image main" target="_blank" style="margin: 2rem auto;"><img src="/images/angular-tutorial-preview.png" alt="" style="display: block; width: 65%; margin: 0 auto;" /></a>
  <h4 style="text-align: center; margin-bottom: 3rem;"><a href="https://landing.mailerlite.com/webforms/landing/k8s9l8" target="_blank">CLICK HERE FOR A FREE 8 CHAPTER PREVIEW OF THE ANGULAR TUTORIAL</a></h4>
  <p>Learning a front-end framework is hard. "Getting started" tutorials cover the basics but you leave thinking, "Okay, now how do I build something with this?"</p>

  <p>The truth is, <strong>getting started tutorials aren't all that great for beginners</strong>. They're demos to highlight as many features as quickly as possible.</p>

  <p>They're great for showing off what a framework can do. <strong>They aren't so great for teaching you how to build web apps</strong>.</p>

  <p>The end result is a basic application that doesn't mimick what it's like building <strong>real applications as a front-end developer</strong>.</p>

  <p>You'll work with a mocked API and database. Application architecture isn't covered. Automated testing is skipped altogether.</p>

  <p>Trust me, I've been there. But those days are over.</p>

  <p>With The Angular Tutorial, you'll learn <strong>how to build applications using a real API and database</strong>. You'll leverage 3rd party APIs like Zomato, Google Places, and open-source libraries <strong>just as you would in a real job</strong>.</p>

  <p>The Angular Tutorial assumes you have no previous knowledge of the Angular framework. It starts at the very beginning.</p>

  <p>Every piece of code is explained and tested to make you interview ready.</p>

  <p>Ready to get started? üëá</p>
  
  <ul class="actions fit" style="list-style: none; display: flex; padding-left: 0px;">
    <li><a href="https://www.softcover.io/buy/6335c999/the-angular-tutorial?option=ebooks" class="button fit" target="_blank">Buy PDF!</a></li>
    <li style="margin-left: 16px;"><a href="https://www.amazon.com/Angular-Tutorial-Front-End-Development-Automated/dp/1980891419/ref=la_B07CMC6CL8_1_1?s=books&ie=UTF8&qid=1526926037&sr=1-1" class="button fit" target="_blank">Buy on Amazon!</a></li>
  </ul>
</article> -->
:ET